#!/bin/bash
set -eo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp /tmp/resource-out.XXXXXX)
cat > "$payload" <&0

get_revision() {
  local release="$1"

  revision="$(helm history --tiller-namespace="$namespace" "$release" | grep -i "DEPLOYED" | awk '{ print $1 }')"
}

# Prepare
namespace=$(jq -r '.source.namespace // ""' < "$payload")
error_if_empty namespace

setup_resource "$payload" "$source"

# Parse parameters
req_params=(
  "chart_dir"
  "release_name"
)
opt_params=(
  "dry_run"
  "recreate_pods"
  "force"
  "wait_until_ready"
  "timeout"
)

for param in "${req_params[@]}"; do
  eval ${param}=$(jq -r '.params.'${param}' // ""' < "$payload")
  error_if_empty ${param}
done

# Deploy
chart="${source}/${chart_dir}"

info "Deploying helm release '$release_name' into kubernetes..."

# Set and report optional parameters
for param in "${opt_params[@]}"; do
  eval ${param}="$(jq -r '.params.'${param}' // ""' < "$payload")"
  [ -n "${!param}" ] || continue

  case "$param" in
    dry_run)
      helm_args+=(--dry-run)
      ;;

    recreate_pods)
      helm_args+=(--recreate-pods)
      ;;

    force)
      helm_args+=(--force)
      ;;

    wait_until_ready)
      helm_args+=(--wait)
      ;;

    timeout)
      helm_args+=(--timeout=${!param})
      ;;

    *) continue
  esac

  opt_line+="'$param' "
done
if [ -n "${opt_line:-}" ]; then
  printf "Using options: %s\n" "$opt_line"
fi

# Override values
set_values=$(jq -r 'if .params.set_values then true else false end' < "$payload")
if $set_values; then
  for key in $(jq -r '.params.set_values | keys[]' < "$payload"); do
    value=$(jq -r '.params.set_values.'$key' // ""' < "$payload")
    helm_args+=(--set $key=${value:-''})

    values_line+="'$key' "
  done

  printf "Values set: %s\n" "$values_line"
fi

helm upgrade --install --tiller-namespace="$namespace" ${helm_args[*]:-} $release_name $chart

get_revision "$release_name" || die "Getting revision"

# Payload
jq -n \
--arg revision "$revision" \
--arg chart_dir "$chart_dir" \
'{
  "version": {
    "revision": $revision
  },
  "metadata": []
}' >&3
